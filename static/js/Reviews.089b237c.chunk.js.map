{"version":3,"file":"static/js/Reviews.089b237c.chunk.js","mappings":"mTAEMA,EAAW,gCACXC,EAAU,mCAIT,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,+GAEoBC,EAAAA,GAAAA,IAAA,mCAAsCF,IAF1D,uBAEKG,EAFL,EAEKA,KAFL,kBAIIA,GAJJ,+IAUA,SAAeC,EAAtB,iDAAO,OAAP,oBAAO,WAAiCC,EAAaC,GAA9C,kGAEoBC,MAAM,GAAD,OACvBR,EADuB,gCACSC,EADT,iCACyCK,EADzC,iBAC6DC,EAD7D,yBAFzB,cAEGE,EAFH,gBAMsBA,EAASC,OAN/B,cAMGC,EANH,yBAOIA,GAPJ,kJAaA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAiCC,GAAjC,kGAEoBL,MAAM,GAAD,OACvBR,EADuB,iBACNa,EADM,oBACcZ,EADd,oBAFzB,cAEGQ,EAFH,gBAKwBA,EAASC,OALjC,cAKGI,EALH,yBAMIA,GANJ,kJAYA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAiCF,GAAjC,kGAEoBL,MAAM,GAAD,OACvBR,EADuB,iBACNa,EADM,4BACsBZ,EADtB,oBAFzB,cAEGQ,EAFH,gBAMwBA,EAASC,OANjC,cAMGM,EANH,yBAOIA,GAPJ,kJAaA,SAAeC,EAAtB,iDAAO,OAAP,oBAAO,WAAiCJ,EAAUK,GAA3C,kGAEoBV,MAAM,GAAD,OACvBR,EADuB,iBACNa,EADM,4BACsBZ,EADtB,gCACqDiB,IAH9E,cAEGT,EAFH,gBAMwBA,EAASC,OANjC,cAMGS,EANH,yBAOIA,GAPJ,kJAjDPhB,EAAAA,GAAAA,SAAAA,QAAyBH,C,wICJZoB,EAAOC,EAAAA,EAAAA,GAAH,0KAGR,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAEM,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IACJ,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IACQ,qBAAGD,MAAkBE,OAAOC,MAA5B,IAITC,EAAON,EAAAA,EAAAA,GAAH,sOAKR,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAEG,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IACQ,qBAAGD,MAAkBE,OAAOC,MAA5B,IAKTE,EAAcP,EAAAA,EAAAA,GAAH,iEACR,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IACJ,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,I,SCvBC,SAASK,IACtB,OAA8BC,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAQR,OANAE,EAAAA,EAAAA,YAAU,YACRlB,EAAAA,EAAAA,IAAkBgB,EAAS,GAAGG,MAAK,SAAAC,GACjCL,EAAWK,EAAEC,QACd,GACF,GAAE,CAACL,IAEGF,GAAWA,EAAQQ,OAAS,GACjC,SAACnB,EAAD,UACGW,EAAQS,KAAI,SAAAC,GAAI,OACf,UAACd,EAAD,YACE,qCAAac,EAAKC,WAClB,uBAAID,EAAKE,YAFAF,EAAKG,GADD,OAQnB,SAAChB,EAAD,uDAEH,C","sources":["api/fetch-data.js","components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '45b0d9a735c6cd370fbf9bc7890ca93c';\n\n// Test Axios\naxios.defaults.baseURL = BASE_URL;\nexport async function fetchTrending() {\n  try {\n    const { data } = await axios.get(`trending/all/day?api_key=${API_KEY}`);\n\n    return data;\n  } catch (error) {\n    return error;\n  }\n}\n\nexport async function fetchSearchMovies(searchQuery, searchPage) {\n  try {\n    const response = await fetch(\n      `${BASE_URL}search/movie?api_key=${API_KEY}&language=en-US&query=${searchQuery}&page=${searchPage}&include_adult=false`\n    );\n\n    const searchList = await response.json();\n    return searchList;\n  } catch (error) {\n    return error;\n  }\n}\n\nexport async function fetchMovieDetails(movie_id) {\n  try {\n    const response = await fetch(\n      `${BASE_URL}movie/${movie_id}?api_key=${API_KEY}&language=en-US`\n    );\n    const movieDetails = await response.json();\n    return movieDetails;\n  } catch (error) {\n    return error;\n  }\n}\n\nexport async function fetchMovieCredits(movie_id) {\n  try {\n    const response = await fetch(\n      `${BASE_URL}movie/${movie_id}/credits?api_key=${API_KEY}&language=en-US`\n    );\n\n    const movieCredits = await response.json();\n    return movieCredits;\n  } catch (error) {\n    return error;\n  }\n}\n\nexport async function fetchMovieReviews(movie_id, reviewsPage) {\n  try {\n    const response = await fetch(\n      `${BASE_URL}movie/${movie_id}/reviews?api_key=${API_KEY}&language=en-US&page=${reviewsPage}`\n    );\n\n    const movieReviews = await response.json();\n    return movieReviews;\n  } catch (error) {\n    return error;\n  }\n}\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: ${p => p.theme.space[4]}px;\n\n  margin-top: ${p => p.theme.space[4]}px;\n  padding: ${p => p.theme.space[4]}px;\n  border: 1px solid ${({ theme }) => theme.colors.accent};\n  border-radius: 20px;\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  flex-direction: column;\n\n  width: 100%;\n  gap: ${p => p.theme.space[4]}px;\n\n  padding: ${p => p.theme.space[4]}px;\n  border: 1px solid ${({ theme }) => theme.colors.accent};\n  border-radius: 20px;\n  box-shadow: 5px 5px 10px -5px rgba(64, 64, 64, 0.75);\n`;\n\nexport const ResultTitle = styled.h2`\n  margin-top: ${p => p.theme.space[4]}px;\n  padding: ${p => p.theme.space[4]}px;\n`;\n","import { fetchMovieReviews } from 'api/fetch-data';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { List, Item, ResultTitle } from './Reviews.styled';\n\nexport default function Reviews() {\n  const [reviews, setReviews] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    fetchMovieReviews(movieId, 1).then(r => {\n      setReviews(r.results);\n    });\n  }, [movieId]);\n\n  return reviews && reviews.length > 0 ? (\n    <List>\n      {reviews.map(item => (\n        <Item key={item.id}>\n          <h3>Author: {item.author}</h3>\n          <p>{item.content}</p>\n        </Item>\n      ))}\n    </List>\n  ) : (\n    <ResultTitle>We don't have any reviews for this movie.</ResultTitle>\n  );\n}\n"],"names":["BASE_URL","API_KEY","fetchTrending","axios","data","fetchSearchMovies","searchQuery","searchPage","fetch","response","json","searchList","fetchMovieDetails","movie_id","movieDetails","fetchMovieCredits","movieCredits","fetchMovieReviews","reviewsPage","movieReviews","List","styled","p","theme","space","colors","accent","Item","ResultTitle","Reviews","useState","reviews","setReviews","movieId","useParams","useEffect","then","r","results","length","map","item","author","content","id"],"sourceRoot":""}